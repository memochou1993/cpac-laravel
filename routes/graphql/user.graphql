extend type Query {
  fetchUsers(
    pagination: Int @eq
  ): [User] @field(resolver: "UserQuery@fetchUsers")

  fetchUser(
    id: ID @eq @rules(
      apply: [
        "required",
      ]
    )
  ): User @find
}

type Mutation {
  storeUser(
    name: String @rules(
      apply: [
        "required",
      ]
    )
    email: String @rules(
      apply: [
        "required",
        "email",
        "unique:users,email",
      ]
    )
    password: String @rules(
      apply: [
        "required",
      ]
    ) @bcrypt
  ): User @create

  updateUser(
    id: ID! @rules(
      apply: [
        "required",
      ]
    )
    name: String
    email: String @rules(
      apply: [
        "email",
      ]
    )
    password: String
  ): User @update

  destroyUser(
    id: ID! @rules(
      apply: [
        "required",
      ]
    )
  ): User @delete
}

type User {
  id: ID!
  name: String!
  email: String!
  created_at: DateTime!
  updated_at: DateTime!
}
